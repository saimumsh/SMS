// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMS.data.SMS_Data;

#nullable disable

namespace SMS.data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240528081538_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SMS.core.Models.Attendence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ispresent")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("Attendents");
                });

            modelBuilder.Entity("SMS.core.Models.ClassLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ClassLevels");
                });

            modelBuilder.Entity("SMS.core.Models.Designation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("SMS.core.Models.ResultSheet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClassLevelID")
                        .HasColumnType("int");

                    b.Property<string>("ExamTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Marks")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClassLevelID")
                        .IsUnique();

                    b.HasIndex("StudentID")
                        .IsUnique();

                    b.ToTable("ResultsSheets");
                });

            modelBuilder.Entity("SMS.core.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClassLevelId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SMS.core.Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClasslevelID")
                        .HasColumnType("int");

                    b.Property<int>("ResultSheetID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClasslevelID");

                    b.HasIndex("ResultSheetID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SMS.core.Models.Teacher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClassId");

                    b.HasIndex("DesignationId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SMS.core.Models.Attendence", b =>
                {
                    b.HasOne("SMS.core.Models.Student", "Student")
                        .WithOne("Attendence")
                        .HasForeignKey("SMS.core.Models.Attendence", "StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SMS.core.Models.ResultSheet", b =>
                {
                    b.HasOne("SMS.core.Models.ClassLevel", "ClassLevel")
                        .WithOne("ResultSheet")
                        .HasForeignKey("SMS.core.Models.ResultSheet", "ClassLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.core.Models.Student", "Student")
                        .WithOne("ResultSheet")
                        .HasForeignKey("SMS.core.Models.ResultSheet", "StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassLevel");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SMS.core.Models.Student", b =>
                {
                    b.HasOne("SMS.core.Models.ClassLevel", "ClassLevel")
                        .WithMany()
                        .HasForeignKey("ClassLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassLevel");
                });

            modelBuilder.Entity("SMS.core.Models.Subject", b =>
                {
                    b.HasOne("SMS.core.Models.ClassLevel", "ClassLevel")
                        .WithMany()
                        .HasForeignKey("ClasslevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.core.Models.ResultSheet", "ResultSheet")
                        .WithMany()
                        .HasForeignKey("ResultSheetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassLevel");

                    b.Navigation("ResultSheet");
                });

            modelBuilder.Entity("SMS.core.Models.Teacher", b =>
                {
                    b.HasOne("SMS.core.Models.ClassLevel", "ClassLevel")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.core.Models.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassLevel");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("SMS.core.Models.ClassLevel", b =>
                {
                    b.Navigation("ResultSheet")
                        .IsRequired();
                });

            modelBuilder.Entity("SMS.core.Models.Student", b =>
                {
                    b.Navigation("Attendence")
                        .IsRequired();

                    b.Navigation("ResultSheet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
